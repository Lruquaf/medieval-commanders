const { PrismaClient } = require('@prisma/client');

// Ensure Prisma Client is properly initialized
let prisma;

try {
  // Log DATABASE_URL for debugging (without password)
  let dbUrl = process.env.DATABASE_URL;
  // Normalize SQLite relative path to absolute prisma/dev.db to avoid creating server/dev.db
  try {
    if (dbUrl && dbUrl.startsWith('file:')) {
      const rawPath = dbUrl.replace(/^file:/, '');
      // If not absolute, force to prisma/dev.db
      if (!rawPath.startsWith('/') && !rawPath.startsWith('\\')) {
        const absolute = require('path').join(__dirname, '..', 'prisma', 'dev.db');
        dbUrl = 'file:' + absolute;
      }
    }
  } catch (_) {}

  if (dbUrl) {
    const urlParts = new URL(dbUrl);
    console.log(`Connecting to database: ${urlParts.protocol}//${urlParts.hostname}:${urlParts.port}${urlParts.pathname}`);
    console.log(`Database user: ${urlParts.username}`);
    console.log(`Database name: ${urlParts.pathname.substring(1)}`);
  } else {
    console.warn('DATABASE_URL environment variable is not set');
  }

  const initClient = () => new PrismaClient({
    datasources: { db: { url: dbUrl } },
    log: ['query', 'info', 'warn', 'error']
  });

  try {
    prisma = initClient();
  } catch (e) {
    if (String(e && e.message || '').includes('did not initialize yet')) {
      // Attempt to generate Prisma Client at runtime (last-resort for production deploys)
      try {
        const cp = require('child_process');
        console.log('Prisma Client not initialized, generating...');
        cp.execSync('npx prisma generate --schema=../prisma/schema.prisma', { stdio: 'inherit', cwd: __dirname });
        prisma = initClient();
      } catch (genErr) {
        console.error('Failed to generate Prisma Client at runtime:', genErr.message);
        throw e;
      }
    } else {
      throw e;
    }
  }

  // Test connection immediately
  prisma.$connect()
    .then(() => {
      console.log('✓ Database connection established successfully');
    })
    .catch((error) => {
      console.error('✗ Database connection failed:', error.message);
      console.error('Connection details:', {
        code: error.code,
        meta: error.meta
      });
    });
} catch (error) {
  console.error('Failed to initialize Prisma Client:', error);
  console.error('Make sure Prisma Client is generated by running: npx prisma generate');
  throw error;
}

module.exports = prisma;
